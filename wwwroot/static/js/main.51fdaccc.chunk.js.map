{"version":3,"sources":["models/card-type.ts","services/get-data.ts","models/netatmo.ts","services/wunderlist-api.ts","utils/spinner.tsx","components/wunderlist-component.tsx","services/netatmo-api.ts","components/Highcharts.tsx","components/netatmo-series-component.tsx","components/netatmo-current-data.tsx","components/netatmo-current-component.tsx","services/philipshue-api.ts","components/hue-component.tsx","components/Dashboard-card.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CardType","SeriesType","getData","url","params","axiosCancelToken","axios","CancelToken","source","defaults","baseURL","interceptors","response","use","error","Promise","reject","fetchParams","cancelToken","token","headers","get","cancel","bind","WunderlistApi","baseUrl","this","Spinner","props","state","loading","isLoading","className","sizeUnit","size","color","React","Component","WunderlistComponent","_wunderlistApi","_abort","wunderlists","getWunderlist","promise","abort","wunderlistResponse","data","setState","console","setTimeout","wunderList","name","tasks","map","task","type","length","list","renderList","NetatmoApi","HighchartsWrapper","chartRef","chartOptions","chart","zoomType","xAxis","yAxis","labels","format","title","text","opposite","min","max","series","serie","values","value","getTicksFromTimestamp","timestamp","Temperature","dashStyle","Humidity","credits","enabled","height","width","date","Date","getTime","current","reflow","window","addEventListener","updateDimensions","ref","containerProps","style","highcharts","Highcharts","options","NetatmoSeriesComponent","_netatmoApi","getSeries","netatmoResponse","NetatmoCurrentDataComp","header","NetatmoCurrentComponent","currentData","getCurrent","key","temperature","minTemp","maxTemp","tempTrend","humidity","absolutePressure","pressure","renderData","PhilipsHueApi","HueComponent","_hueApi","lights","getHue","hueResponse","hexColor","borderRadius","backgroundColor","hueLights","light","on","icon","getHueStyle","DashboardCard","NetatmoCurrent","NetatmoSeries","PhilipsHue","Wunderlist","renderCardType","App","library","add","faList","faLightbulb","faCloudSun","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.51fdaccc.chunk.js","sourcesContent":["export enum CardType {\r\n    NetatmoCurrent,\r\n    NetatmoSeries,\r\n    PhilipsHue,\r\n    Wunderlist\r\n}","import axios, { AxiosResponse, AxiosRequestConfig, AxiosError } from \"axios\";\r\n\r\nexport const getData = <T>(url: string, params: any): [Promise<AxiosResponse<T>>, () => void] => {\r\n\r\n    const axiosCancelToken = axios.CancelToken.source()\r\n\r\n    axios.defaults.baseURL = (process.env.NODE_ENV !== \"production\") ? \"http://localhost:5000\" : \"\"\r\n\r\n    axios.interceptors.response.use(\r\n        (response: AxiosResponse<any>) => {\r\n            return response as AxiosResponse<T>;\r\n        }, (error: AxiosError) => {\r\n            return Promise.reject(error);\r\n        });\r\n\r\n    const fetchParams: AxiosRequestConfig = {\r\n        ...params,\r\n        cancelToken: axiosCancelToken.token,\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Accept\": \"application/json\"\r\n        }\r\n    };\r\n\r\n    const promise = axios.get<T>(url, fetchParams);\r\n\r\n    return [\r\n        promise,\r\n        axiosCancelToken.cancel.bind(axiosCancelToken)\r\n    ];\r\n};","export interface NetatmoCurrent {\r\n    id: string;\r\n    name: string;\r\n    temperature: number;\r\n    co2: number;\r\n    humidity: number;\r\n    pressure: number;\r\n    absolutePressure: number;\r\n    minTemp: number;\r\n    maxTemp: number;\r\n    tempTrend: string;\r\n    pressureTrend: string;\r\n}\r\n\r\nexport interface NetatmoSerie {\r\n    id: string;\r\n    name: string;\r\n    values: NetatmoValue[];\r\n    type: SeriesType;\r\n}\r\n\r\nexport interface NetatmoValue {\r\n    value: number;\r\n    timestamp: Date;\r\n}\r\n\r\nexport enum SeriesType {\r\n    Temperature,\r\n    Humidity\r\n}","import { AxiosResponse } from 'axios';\r\nimport { Wunderlist } from './../models/wunderlist';\r\nimport { getData } from \"./get-data\";\r\n\r\nclass WunderlistApi {\r\n\r\n    private readonly baseUrl = \"/api/v1/data/wunderlist\";\r\n\r\n    public getWunderlist(): [Promise<AxiosResponse<Wunderlist[]>>, () => void] {\r\n        return getData<Wunderlist[]>(this.baseUrl, null);\r\n    }\r\n}\r\n\r\nexport default WunderlistApi;\r\n","import React from \"react\";\r\nimport GridLoader from \"react-spinners/GridLoader\";\r\nimport \"./spinner.css\";\r\n\r\ntype SpinnerState = { loading: boolean };\r\ntype SpinnerProps = { isLoading: boolean };\r\n\r\nclass Spinner extends React.Component<SpinnerProps, SpinnerState> {\r\n\r\n    constructor(props: Readonly<SpinnerProps>) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            loading: props.isLoading\r\n        };\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"loader-container\">\r\n                <div className=\"loading\">\r\n                    <GridLoader\r\n                        sizeUnit={\"px\"}\r\n                        size={20}\r\n                        color={\"#003f5c\"}\r\n                        loading={this.state.loading}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Spinner;","import React from 'react';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport \"./wunderlist.css\";\r\nimport WunderlistApi from \"../services/wunderlist-api\";\r\nimport { Wunderlist } from \"../models/wunderlist\";\r\nimport Spinner from \"../utils/spinner\";\r\n\r\ntype WunderlistState = { wunderlists: Wunderlist[], isLoading: boolean };\r\n\r\nexport default class WunderlistComponent extends React.Component<{}, WunderlistState> {\r\n\r\n    private _wunderlistApi: WunderlistApi;\r\n    private _abort!: () => void;\r\n\r\n    constructor(props: Readonly<any>) {\r\n        super(props);\r\n        this._wunderlistApi = new WunderlistApi();\r\n        this.state = { wunderlists: [], isLoading: true };\r\n    }\r\n\r\n    public async componentDidMount() {\r\n        try {\r\n            const [promise, abort] = this._wunderlistApi.getWunderlist();\r\n            this._abort = abort;\r\n\r\n            const wunderlistResponse = await promise;\r\n\r\n            if (!wunderlistResponse.data)\r\n                return;\r\n\r\n            this.setState({ wunderlists: wunderlistResponse.data })\r\n\r\n        } catch (error) {\r\n            console.error(error);\r\n        } finally {\r\n            setTimeout(() => {\r\n                this.setState({ isLoading: false });\r\n            }, 1000);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._abort();\r\n    }\r\n\r\n    renderList(wunderList: Wunderlist) {\r\n        return (\r\n            <div className=\"list-container\">\r\n                <h4>\r\n                    {wunderList.name}\r\n                </h4>\r\n                <div className=\"tasks\">\r\n                    {wunderList.tasks.map((task) => {\r\n                        return <span className=\"task-row\">{task.name} ({task.type})</span>\r\n                    })}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isLoading) {\r\n            return (<Spinner isLoading={this.state.isLoading} />);\r\n        } else if (this.state.wunderlists.length < 1 && !this.state.isLoading) {\r\n            return (\r\n                <div className=\"wunderlist-container\">\r\n                    <h4>Failed to load any wunderlists =(</h4>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"wunderlist-container\">\r\n                    {this.state.wunderlists.map(list => this.renderList(list))}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}","import { AxiosResponse } from 'axios';\r\nimport { getData } from \"./get-data\";\r\nimport { NetatmoSerie, NetatmoCurrent } from \"../models/netatmo\";\r\n\r\nclass NetatmoApi {\r\n\r\n    private readonly baseUrl = \"/api/v1/data/netatmo\";\r\n\r\n    public getCurrent(): [Promise<AxiosResponse<NetatmoCurrent[]>>, () => void] {\r\n        return getData<NetatmoCurrent[]>(`${this.baseUrl}/current`, null);\r\n    }\r\n\r\n    public getSeries(): [Promise<AxiosResponse<NetatmoSerie[]>>, () => void]{\r\n        return getData<NetatmoSerie[]>(`${this.baseUrl}/series`, null);\r\n    }\r\n}\r\n\r\nexport default NetatmoApi;\r\n","import * as React from \"react\";\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\n\r\nimport \"./Highcharts.css\";\r\nimport { NetatmoSerie, SeriesType } from \"../models/netatmo\";\r\n\r\ntype HighchartsWrapperState = {\r\n    chartOptions: any,\r\n    height: string;\r\n    width: string;\r\n};\r\n\r\ntype HighchartsWrapperProps = {\r\n    series: NetatmoSerie[];\r\n}\r\n\r\nclass HighchartsWrapper extends React.Component<HighchartsWrapperProps, HighchartsWrapperState> {\r\n\r\n    private chartRef: any;\r\n\r\n    constructor(props: Readonly<any>) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            chartOptions: {\r\n                chart: {\r\n                    zoomType: \"xy\",\r\n                },\r\n                xAxis: {\r\n                    type: \"datetime\"\r\n                },\r\n                yAxis: [\r\n                    {\r\n                        labels: {\r\n                            format: \"{value}°C\"\r\n                        },\r\n                        title: {\r\n                            text: \"Temperature\"\r\n                        },\r\n                        opposite: false\r\n                    },\r\n                    {\r\n                        labels: {\r\n                            format: \"{value} %\"\r\n                        },\r\n                        title: {\r\n                            text: \"Humidity\"\r\n                        },\r\n                        min: 0,\r\n                        max: 100,\r\n                        opposite: true\r\n                    }\r\n                ],\r\n                series: this.props.series.map(serie => {\r\n                    return {\r\n                        data: serie.values.map(value => [this.getTicksFromTimestamp(value.timestamp), value.value]),\r\n                        name: serie.name,\r\n                        yAxis: serie.type === SeriesType.Temperature ? 0 : 1,\r\n                        dashStyle: serie.type === SeriesType.Humidity ? \"shortdot\" : \"solid\"\r\n                    };\r\n                }),\r\n                credits: {\r\n                    enabled: false\r\n                }\r\n            },\r\n            height: \"100%\",\r\n            width: \"100%\"\r\n        };\r\n\r\n        this.chartRef = React.createRef();\r\n    }\r\n\r\n    private getTicksFromTimestamp(date: Date) {\r\n        return new Date(date).getTime();\r\n    }\r\n\r\n    private updateDimensions() {\r\n        this.chartRef.current.chart.reflow();\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"resize\", this.updateDimensions.bind(this));\r\n    }\r\n\r\n    componentWillUnmount() {\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        const { chartOptions, height, width } = this.state;\r\n        return (\r\n            <div className=\"highcharts-container\">\r\n                <HighchartsReact\r\n                    ref={this.chartRef}\r\n                    containerProps={{ style: { height: height, width: width } }}\r\n                    highcharts={Highcharts}\r\n                    options={chartOptions}\r\n                    {...this.props}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HighchartsWrapper;","import React from 'react';\r\nimport NetatmoApi from \"../services/netatmo-api\";\r\nimport { NetatmoSerie } from \"../models/netatmo\";\r\nimport HighchartsWrapper from \"./Highcharts\";\r\nimport Spinner from \"../utils/spinner\";\r\n\r\ntype NetatmoSeriesState = { series: NetatmoSerie[], isLoading: boolean };\r\n\r\n\r\nexport default class NetatmoSeriesComponent extends React.Component<{}, NetatmoSeriesState> {\r\n\r\n    private _netatmoApi: NetatmoApi;\r\n    private _abort!: () => void;\r\n\r\n    constructor(props: Readonly<any>) {\r\n        super(props);\r\n        this._netatmoApi = new NetatmoApi();\r\n        this.state = { series: [], isLoading: true };\r\n    }\r\n\r\n    public async componentDidMount() {\r\n        try {\r\n            const [promise, abort] = this._netatmoApi.getSeries();\r\n            this._abort = abort;\r\n\r\n            const netatmoResponse = await promise;\r\n\r\n            if (!netatmoResponse.data)\r\n                return;\r\n\r\n            this.setState({ series: netatmoResponse.data })\r\n\r\n        } catch (error) {\r\n            console.error(error);\r\n        } finally {\r\n            this.setState({ isLoading: false });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._abort();\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isLoading) {\r\n            return (<Spinner isLoading={this.state.isLoading} />);\r\n        } else if (this.state.series.length < 1 && !this.state.isLoading) {\r\n            return (\r\n                <h4>Couldn't load any series =(</h4>\r\n            );\r\n        } else {\r\n            return (\r\n                <HighchartsWrapper series={this.state.series} />\r\n            );\r\n        }\r\n    }\r\n}","import React from \"react\";\r\n\r\ntype CurrentDataProp = { header: string, data: string | number };\r\n\r\nexport const NetatmoCurrentDataComp: React.FC<CurrentDataProp> = (props) => {\r\n  return (\r\n    <div className=\"current-row-container\">\r\n      <span className=\"header\">{props.header}</span>\r\n      <span className=\"data\">{props.data}</span>\r\n    </div>\r\n  );\r\n}","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport NetatmoApi from \"../services/netatmo-api\";\r\nimport { NetatmoCurrent } from \"../models/netatmo\";\r\nimport \"./netatmo.css\";\r\nimport Spinner from \"../utils/spinner\";\r\nimport { NetatmoCurrentDataComp } from \"./netatmo-current-data\";\r\n\r\ntype NetatmoCurrentState = { currentData: NetatmoCurrent[], isLoading: boolean };\r\n\r\n\r\nexport default class NetatmoCurrentComponent extends React.Component<{}, NetatmoCurrentState> {\r\n\r\n    private _netatmoApi: NetatmoApi;\r\n    private _abort!: () => void;\r\n\r\n    constructor(props: Readonly<any>) {\r\n        super(props);\r\n        this._netatmoApi = new NetatmoApi();\r\n        this.state = { currentData: [], isLoading: true };\r\n    }\r\n\r\n    public async componentDidMount() {\r\n        try {\r\n            const [promise, abort] = this._netatmoApi.getCurrent();\r\n            this._abort = abort;\r\n\r\n            const netatmoResponse = await promise;\r\n\r\n            if (!netatmoResponse.data)\r\n                return;\r\n\r\n            this.setState({ currentData: netatmoResponse.data })\r\n\r\n        } catch (error) {\r\n            console.error(error);\r\n        } finally {\r\n            this.setState({ isLoading: false });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._abort();\r\n    }\r\n\r\n    renderData(data: NetatmoCurrent) {\r\n        return (\r\n            <div key={data.name}>\r\n                <h2 className=\"module-header\">{data.name}</h2>\r\n                <NetatmoCurrentDataComp header=\"Current temp\" data={data.temperature} />\r\n                <NetatmoCurrentDataComp header=\"Min temp (24 h)\" data={data.minTemp} />\r\n                <NetatmoCurrentDataComp header=\"Max temp (24 h)\" data={data.maxTemp} />\r\n                <NetatmoCurrentDataComp header=\"Temp trend\" data={data.tempTrend} />\r\n                <NetatmoCurrentDataComp header=\"Humidity\" data={data.humidity} />\r\n                <NetatmoCurrentDataComp header=\"Absolute pressure\" data={data.absolutePressure} />\r\n                <NetatmoCurrentDataComp header=\"Pressure\" data={data.pressure} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isLoading) {\r\n            return (<Spinner isLoading={this.state.isLoading} />);\r\n        } else if (this.state.currentData.length < 1 && !this.state.isLoading) {\r\n            return (<h4>Failed to load Philips Hue status =(</h4>);\r\n        } else {\r\n            return (\r\n                <div className=\"netatmo-current-container\">\r\n                    {this.state.currentData.map((data: NetatmoCurrent) => this.renderData(data))}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n","import { AxiosResponse } from 'axios';\r\nimport { getData } from \"./get-data\";\r\nimport { Hue } from \"../models/philips-hue\";\r\n\r\nclass PhilipsHueApi {\r\n\r\n    private readonly baseUrl = \"/api/v1/data/hue\";\r\n\r\n    public getHue(): [Promise<AxiosResponse<Hue>>, () => void] {\r\n        return getData<Hue>(this.baseUrl, null);\r\n    }\r\n}\r\n\r\nexport default PhilipsHueApi;\r\n","import React, { CSSProperties } from 'react';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport PhilipsHueApi from \"../services/philipshue-api\";\r\nimport { Light } from \"../models/philips-hue\";\r\nimport \"./philips-hue.css\";\r\nimport Spinner from \"../utils/spinner\";\r\n\r\ntype HueState = { lights: Light[], isLoading: boolean; };\r\n\r\nexport default class HueComponent extends React.Component<{}, HueState> {\r\n\r\n    private _hueApi: PhilipsHueApi;\r\n    private _abort!: () => void;\r\n\r\n    constructor(props: Readonly<any>) {\r\n        super(props);\r\n        this._hueApi = new PhilipsHueApi();\r\n        this.state = { lights: [], isLoading: true };        \r\n    }\r\n\r\n    public async componentDidMount() {\r\n        try {\r\n            const [promise, abort] = this._hueApi.getHue();\r\n            this._abort = abort;\r\n\r\n            const hueResponse = await promise;\r\n            if (!hueResponse.data)\r\n                return;\r\n\r\n            this.setState({ lights: hueResponse.data.lights })\r\n        } catch (error) {\r\n            console.error(error);\r\n        } finally {\r\n            setTimeout(() => {\r\n                this.setState({ isLoading: false });\r\n            }, 1000);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._abort();\r\n    }\r\n\r\n    getHueStyle(hexColor: string): CSSProperties {\r\n        return {\r\n            width: \"50px\",\r\n            height: \"50px\",\r\n            borderRadius: \"50%\",\r\n            backgroundColor: `#${hexColor}`\r\n        };\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isLoading) {\r\n            return (<Spinner isLoading={this.state.isLoading} />);\r\n        } else if (this.state.lights.length < 1 && !this.state.isLoading) {\r\n            return (\r\n                <div className=\"lights-container\">\r\n                    <h4>Failed to load hue lights =(</h4>\r\n                </div>\r\n            );\r\n        } else {\r\n            const hueLights = this.state.lights\r\n                .map((light: Light) => {\r\n                    return (\r\n                        <div className=\"light-row\">\r\n                            <FontAwesomeIcon color={light.on ? \"green\" : \"red\"} size=\"3x\" icon=\"lightbulb\" />\r\n                            <span className=\"light-name\">{light.name}</span>\r\n                            <span style={this.getHueStyle(light.hexColor)}></span>\r\n                        </div>\r\n                    )\r\n                });\r\n\r\n            return (\r\n                <div className=\"lights-container\">\r\n                    {hueLights}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}","\r\nimport { CardType } from \"../models/card-type\";\r\nimport \"./Dashboard-card.css\";\r\nimport WunderlistComponent from \"./wunderlist-component\";\r\nimport NetatmoSeriesComponent from \"./netatmo-series-component\";\r\nimport NetatmoCurrentComponent from \"./netatmo-current-component\";\r\nimport HueComponent from \"./hue-component\";\r\nimport React from \"react\";\r\n\r\ntype DashboardState = { type: CardType, title: string };\r\n\r\nclass DashboardCard extends React.Component<{ type: CardType }, DashboardState> {\r\n\r\n  constructor(props: Readonly<any>) {\r\n    super(props);\r\n    this.state = { type: props.type, title: \"\" };\r\n  }\r\n\r\n  componentDidMount() {\r\n    switch (this.state.type) {\r\n      case CardType.NetatmoCurrent:\r\n        this.setState({ title: \"Current temperature data\" });\r\n        break;\r\n      case CardType.NetatmoSeries:\r\n        this.setState({ title: \"Temperature/Humidity last week\" });\r\n        break;\r\n      case CardType.PhilipsHue:\r\n        this.setState({ title: \"Philips Hue status\" });\r\n        break;\r\n      case CardType.Wunderlist:\r\n        this.setState({ title: \"Wunderlists\" });\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n\r\n  }\r\n\r\n  renderCardType() {\r\n    switch (this.state.type) {\r\n      case CardType.NetatmoCurrent:\r\n        return (<NetatmoCurrentComponent />);\r\n      case CardType.NetatmoSeries:\r\n        return (<NetatmoSeriesComponent />);\r\n      case CardType.PhilipsHue:\r\n        return (<HueComponent />);\r\n      case CardType.Wunderlist:\r\n        return (<WunderlistComponent />);\r\n\r\n      default:\r\n        return (<div>This type is not supported ... Where did you get it?</div>)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"dashboard-card-container\">\r\n        <div className=\"dashboard-card\">\r\n          <div className=\"card-header\">\r\n            {this.state.title}\r\n          </div>\r\n          <div className=\"card-body\">\r\n            {this.renderCardType()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DashboardCard;\r\n","import React from 'react';\nimport './App.css';\n\nimport { CardType } from \"./models/card-type\";\n\nimport { library } from \"@fortawesome/fontawesome-svg-core\"\nimport { faList, faLightbulb, faCloudSun } from '@fortawesome/free-solid-svg-icons'\nimport DashboardCard from \"./components/Dashboard-card\";\n\n\nconst App: React.FC = () => {\n\n  library.add(faList, faLightbulb, faCloudSun);\n\n  return (\n    <div className=\"App\">\n      <DashboardCard type={CardType.NetatmoCurrent}></DashboardCard>\n      <DashboardCard type={CardType.NetatmoSeries}></DashboardCard>\n      <DashboardCard type={CardType.PhilipsHue}></DashboardCard>\n      <DashboardCard type={CardType.Wunderlist}></DashboardCard>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}